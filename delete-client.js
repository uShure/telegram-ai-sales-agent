#!/usr/bin/env bun

import Database from 'bun:sqlite';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

console.log('üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•');
console.log('=' .repeat(50));

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
const db = new Database('./conversations.db');

try {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const clients = db.prepare(`
    SELECT DISTINCT
      userId,
      userName,
      COUNT(*) as messageCount,
      MAX(lastMessageAt) as lastMessage
    FROM conversations
    GROUP BY userId
    ORDER BY lastMessage DESC
  `).all();

  if (clients.length === 0) {
    console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞');
    process.exit(0);
  }

  console.log('\nüìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n');
  clients.forEach((client, index) => {
    const lastDate = new Date(client.lastMessage).toLocaleString('ru-RU');
    console.log(`${index + 1}. ${client.userName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`);
    console.log(`   ID: ${client.userId}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π: ${client.messageCount}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${lastDate}`);
    console.log();
  });

  console.log('=' .repeat(50));

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const answer = await question('\nüí° –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ "all" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –±–∞–∑—ã): ');

  if (answer.toLowerCase() === 'all') {
    const confirm = await question('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∏–∞–ª–æ–≥–∏! –í—ã —É–≤–µ—Ä–µ–Ω—ã? (–¥–∞/–Ω–µ—Ç): ');

    if (confirm.toLowerCase() === '–¥–∞' || confirm.toLowerCase() === 'yes') {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      const deleteAll = db.prepare('DELETE FROM conversations');
      const result = deleteAll.run();
      console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.changes}`);
      console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞');
    } else {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    }
  } else {
    const userId = parseInt(answer);

    if (isNaN(userId)) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID');
      process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
    const client = db.prepare('SELECT * FROM conversations WHERE userId = ? LIMIT 1').get(userId);

    if (!client) {
      console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }

    const confirm = await question(`\n‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Å ${client.userName}? (–¥–∞/–Ω–µ—Ç): `);

    if (confirm.toLowerCase() === '–¥–∞' || confirm.toLowerCase() === 'yes') {
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
      const deleteClient = db.prepare('DELETE FROM conversations WHERE userId = ?');
      const result = deleteClient.run(userId);

      console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.changes}`);
      console.log(`üìä –ö–ª–∏–µ–Ω—Ç ${client.userName} (ID: ${userId}) —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã`);
    } else {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    }
  }

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
} finally {
  db.close();
  rl.close();
}
