import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions";
import { NewMessage } from "telegram/events";
import { Api } from "telegram";
import input from "input";
import dotenv from "dotenv";
import { database } from "../database/database";
import { AIAgent } from "../ai/aiAgent";
import { coursesDB } from "../database/coursesDB";
import fs from "node:fs";
import path from "node:path";
import { logger } from "../utils/logger";
import { globalRateLimiter } from "../utils/rateLimiter";
import { validateMessage } from "../utils/validator";
import { config } from "../config/env";

dotenv.config();

// –ö–∞—Ä—Ç–∞ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö entity
interface TelegramEntity {
  id?: string | number;
  firstName?: string;
  lastName?: string;
  username?: string;
  phone?: string;
}

const entityCache = new Map<string, TelegramEntity>();

export class EnhancedTelegramBot {
  private client: TelegramClient;
  private session: StringSession;
  private aiAgent: AIAgent;
  private isRunning = false;
  private processedMessages: Set<number> = new Set();
  private messageCleanupInterval?: NodeJS.Timeout;

  constructor() {
    const sessionFile = path.join(process.cwd(), "sointera_sales_session.txt");
    const savedSession = fs.existsSync(sessionFile)
      ? fs.readFileSync(sessionFile, "utf-8").trim()
      : "";

    this.session = new StringSession(savedSession);
    this.aiAgent = new AIAgent();

    this.client = new TelegramClient(
      this.session,
      config.apiId,
      config.apiHash,
      {
        connectionRetries: 5,
        autoReconnect: true,
        retryDelay: 1000,
      },
    );

    // –û—á–∏—Å—Ç–∫–∞ processedMessages –∫–∞–∂–¥—ã–π —á–∞—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
    this.messageCleanupInterval = setInterval(() => {
      if (this.processedMessages.size > 1000) {
        const toKeep = Array.from(this.processedMessages).slice(-500);
        this.processedMessages = new Set(toKeep);
        logger.debug("Cleaned up processed messages cache");
      }
    }, 3600000);
  }

  private saveSession(): void {
    const sessionFile = path.join(process.cwd(), "sointera_sales_session.txt");
    fs.writeFileSync(sessionFile, this.session.save());
    console.log("‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
  }

  async start(): Promise<void> {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Telegram –∫–ª–∏–µ–Ω—Ç–∞...");

    await this.client.start({
      phoneNumber: async () =>
        process.env.PHONE_NUMBER ||
        (await input.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")),
      password: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å): "),
      phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
      onError: (err) => console.error("–û—à–∏–±–∫–∞:", err),
    });

    console.log("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!");
    this.saveSession();

    await database.initialize();
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –∫—É—Ä—Å–æ–≤
    try {
      const coursesCount = await coursesDB.getAllCourses();
      console.log(
        `‚úÖ –ë–∞–∑–∞ –∫—É—Ä—Å–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${coursesCount.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤`,
      );
    } catch (error) {
      console.error("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –∫—É—Ä—Å–æ–≤:", error);
    }

    this.client.addEventHandler(
      this.handleNewMessage.bind(this),
      new NewMessage({}),
    );

    this.isRunning = true;
    console.log("‚úÖ Enhanced –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
    console.log("üí¨ –û–∂–∏–¥–∞—é –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...");

    this.startFollowUpChecker();
  }

  private async resolveEntity(
    message: any,
    senderId: string,
  ): Promise<{
    entity: any | null;
    userName: string;
    userPhone: string;
  }> {
    let entity = null;
    let userName = "–ö–ª–∏–µ–Ω—Ç";
    let userPhone = "";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (entityCache.has(senderId)) {
      console.log("üìã Entity –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ");
      entity = entityCache.get(senderId);
    }

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!entity && (message.sender || message._sender)) {
      entity = message.sender || message._sender;
      entityCache.set(senderId, entity);
    }

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è entity
    if (!entity) {
      const methods = [
        // –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ peerId
        async () => await this.client.getEntity(message.peerId),
        // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ userId –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        async () => await this.client.getEntity(senderId),
        // –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ userId –∫–∞–∫ —á–∏—Å–ª–æ
        async () => await this.client.getEntity(Number.parseInt(senderId)),
        // –ú–µ—Ç–æ–¥ 4: –ß–µ—Ä–µ–∑ getInputEntity
        async () => {
          const input = await this.client.getInputEntity(message.peerId);
          return await this.client.getEntity(input);
        },
        // –ú–µ—Ç–æ–¥ 5: –ß–µ—Ä–µ–∑ dialogs
        async () => {
          const dialogs = await this.client.getDialogs();
          const dialog = dialogs.find((d) => d.id?.toString() === senderId);
          return dialog?.entity;
        },
      ];

      for (let i = 0; i < methods.length; i++) {
        try {
          console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –ø–æ–ª—É—á–∏—Ç—å entity...`);
          entity = await methods[i]();
          if (entity) {
            entityCache.set(senderId, entity);
            console.log(`‚úÖ Entity –ø–æ–ª—É—á–µ–Ω –º–µ—Ç–æ–¥–æ–º ${i + 1}`);
            break;
          }
        } catch (e) {
          continue;
        }
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (entity) {
      if ("firstName" in entity) {
        userName = entity.firstName || "–ö–ª–∏–µ–Ω—Ç";
        if (entity.lastName) userName += " " + entity.lastName;
      }
      if ("phone" in entity) {
        userPhone = entity.phone || "";
      }
    } else {
      userName = `User${senderId}`;
    }

    return { entity, userName, userPhone };
  }

  private async sendMessageWithFallback(
    message: any,
    senderId: string,
    entity: any,
    responseText: string,
  ): Promise<boolean> {
    const methods = [
      // –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ entity —Å reply
      async () => {
        if (entity) {
          await this.client.sendMessage(entity, {
            message: responseText,
            replyTo: message.id,
          });
          console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ entity —Å reply");
          return true;
        }
        return false;
      },

      // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ peerId
      async () => {
        await this.client.sendMessage(message.peerId, {
          message: responseText,
          replyTo: message.id,
        });
        console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ peerId");
        return true;
      },

      // –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID
      async () => {
        const id = Number.parseInt(senderId);
        if (!isNaN(id)) {
          await this.client.sendMessage(id, { message: responseText });
          console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID");
          return true;
        }
        return false;
      },

      // –ú–µ—Ç–æ–¥ 4: –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
      async () => {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥
        await this.client.invoke(
          new Api.messages.GetPeerDialogs({
            peers: [message.peerId],
          }),
        );
        await new Promise((resolve) => setTimeout(resolve, 500));

        await this.client.sendMessage(message.peerId, {
          message: responseText,
        });
        console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞");
        return true;
      },

      // –ú–µ—Ç–æ–¥ 5: –ß–µ—Ä–µ–∑ invoke SendMessage API
      async () => {
        const result = await this.client.invoke(
          new Api.messages.SendMessage({
            peer: message.peerId,
            message: responseText,
            randomId: BigInt(Math.floor(Math.random() * 1e15)),
            replyTo: new Api.InputReplyToMessage({
              replyToMsgId: message.id,
            }),
          }),
        );
        console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ invoke API");
        return true;
      },
    ];

    for (const method of methods) {
      try {
        console.log("üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...");
        const success = await method();
        if (success) return true;
      } catch (e: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
        continue;
      }
    }

    return false;
  }

  private async handleNewMessage(event: any): Promise<void> {
    try {
      const message = event.message;

      if (message.out) return;
      if (this.processedMessages.has(message.id)) return;
      this.processedMessages.add(message.id);

      console.log("\nüîç –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:");
      console.log(`   ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.id}`);
      console.log(`   –¢–µ–∫—Å—Ç: ${message.text}`);

      const peer = message.peerId;
      const senderId = peer?.userId?.toString() || peer?.chatId?.toString();

      if (!senderId) {
        console.log("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º entity –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const { entity, userName, userPhone } = await this.resolveEntity(
        message,
        senderId,
      );

      console.log(
        `üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (ID: ${senderId}): ${message.text}`,
      );
      console.log(`   Entity: ${entity ? "‚úÖ" : "‚ùå"}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${userPhone || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
      try {
        await this.client.invoke(
          new Api.messages.SetTyping({
            peer: peer,
            action: new Api.SendMessageTypingAction(),
          }),
        );
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }

      // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
      const conversationId = await database.getOrCreateConversation(
        senderId,
        userName,
        userPhone,
      );

      await database.addMessage(conversationId, "user", message.text);

      const conversation = await database.getFullConversation(senderId);
      if (!conversation) {
        console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞");
        return;
      }

      // AI –æ—Ç–≤–µ—Ç
      console.log("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI...");
      const aiResponse = await this.aiAgent.generateResponse(
        conversation,
        message.text,
      );

      await database.updateClientStatus(
        conversationId,
        aiResponse.clientStatus,
      );
      if (aiResponse.suggestedProducts.length > 0) {
        await database.updateInterestedProducts(
          conversationId,
          aiResponse.suggestedProducts,
        );
      }

      if (
        aiResponse.shouldScheduleFollowUp &&
        !conversation.followUpScheduled
      ) {
        const followUpDate = new Date();
        followUpDate.setDate(
          followUpDate.getDate() + Number.parseInt(process.env.FOLLOW_UP_DAYS || "3"),
        );
        await database.scheduleFollowUp(conversationId, followUpDate);
        console.log(
          `üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω follow-up –Ω–∞ ${followUpDate.toLocaleDateString()}`,
        );
      }

      // –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞
      const typingDelay = Math.min(aiResponse.response.length * 20, 3000);
      console.log(`‚è±Ô∏è  –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞: ${typingDelay}–º—Å`);
      await new Promise((resolve) => setTimeout(resolve, typingDelay));

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
      const sent = await this.sendMessageWithFallback(
        message,
        senderId,
        entity,
        aiResponse.response,
      );

      if (sent) {
        await database.addMessage(
          conversationId,
          "assistant",
          aiResponse.response,
        );
        console.log(`üìä –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞: ${aiResponse.clientStatus}`);
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
        try {
          await this.client.sendMessage("me", {
            message: `[–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω]\n\n–î–ª—è: ${userName} (${senderId})\n\n–û—Ç–≤–µ—Ç:\n${aiResponse.response}\n\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
          });
          console.log("üìù –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ");
        } catch (e) {
          console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ");
        }

        await database.addMessage(
          conversationId,
          "assistant",
          `[–ù–ï –î–û–°–¢–ê–í–õ–ï–ù–û] ${aiResponse.response}`,
        );
        console.log(
          "\n‚ö° –°–æ–≤–µ—Ç: –û—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞",
        );
      }
    } catch (error: any) {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    }
  }

  private async startFollowUpChecker(): Promise<void> {
    setInterval(
      async () => {
        try {
          const pendingFollowUps = await database.getPendingFollowUps();

          for (const { followUp, conversation } of pendingFollowUps) {
            try {
              const fullConversation = await database.getFullConversation(
                conversation.userId,
              );
              if (!fullConversation) continue;

              const followUpMessage =
                await this.aiAgent.generateFollowUpMessage(fullConversation);

              // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –∏–∑ –∫–µ—à–∞
              const entity = entityCache.get(conversation.userId);
              const sent = await this.sendMessageWithFallback(
                { peerId: { userId: conversation.userId } },
                conversation.userId,
                entity,
                followUpMessage,
              );

              if (sent) {
                await database.addMessage(
                  conversation.id!,
                  "assistant",
                  followUpMessage,
                );
                await database.markFollowUpCompleted(followUp.id!);
                console.log(
                  `‚úÖ Follow-up –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${conversation.userName}`,
                );
              }
            } catch (error) {
              console.error(
                `‚ùå –û—à–∏–±–∫–∞ follow-up –¥–ª—è ${conversation.userName}:`,
                error,
              );
            }
          }
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ follow-up:", error);
        }
      },
      60 * 60 * 1000,
    );
  }

  async sendProactiveMessage(userId: string, message: string): Promise<void> {
    try {
      const entity = entityCache.get(userId);
      const sent = await this.sendMessageWithFallback(
        { peerId: { userId } },
        userId,
        entity,
        message,
      );

      if (sent) {
        console.log(
          `üì§ –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
        );
      } else {
        console.log(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
        );
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  }

  async getStats(): Promise<void> {
    const stats = await database.getConversationStats();
    console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:");
    console.log(`–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${stats.total}`);
    console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.activeToday}`);
    console.log("\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:");
    Object.entries(stats.byStatus).forEach(([status, count]) => {
      console.log(`  ${status}: ${count}`);
    });
    console.log(`\nüíæ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–æ entity: ${entityCache.size}`);
  }

  async stop(): Promise<void> {
    this.isRunning = false;
    database.close();
    coursesDB.close();
    await this.client.disconnect();
    console.log("üëã Enhanced –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  isActive(): boolean {
    return this.isRunning;
  }
}
