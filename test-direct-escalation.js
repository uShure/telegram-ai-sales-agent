#!/usr/bin/env bun

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å inline mention
 */

const { TelegramClient, Api } = require('telegram');
const { StringSession } = require('telegram/sessions');
const readline = require('readline');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const apiId = parseInt(process.env.API_ID || '0');
const apiHash = process.env.API_HASH || '';
const phoneNumber = process.env.PHONE_NUMBER || '';
const MANAGER_USERNAME = 'natalylini';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

/**
 * –°–æ–∑–¥–∞–µ—Ç inline mention –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function createUserMention(userId, userName, offset) {
  return new Api.MessageEntityMentionName({
    offset: offset,
    length: userName.length,
    userId: BigInt(userId)
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
 */
function formatWithMention(clientId, clientName, message) {
  const entities = [];

  let text = `üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï\n\n`;
  text += `–≠—Ç–æ —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —ç—Å–∫–∞–ª–∞—Ü–∏–∏ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏.\n\n`;
  text += `–ö–ª–∏–µ–Ω—Ç: `;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è mention
  const mentionOffset = text.length;
  text += clientName;

  // –°–æ–∑–¥–∞–µ–º mention entity
  entities.push(createUserMention(clientId, clientName, mentionOffset));

  text += `\nID: ${clientId}\n`;
  text += `–ó–∞–ø—Ä–æ—Å: "${message}"\n\n`;
  text += `üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã—à–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –Ω–∏–º\n\n`;
  text += `‚è∞ ${new Date().toLocaleString('ru-RU')}\n`;
  text += `#—Ç–µ—Å—Ç #—ç—Å–∫–∞–ª–∞—Ü–∏—è`;

  return { text, entities };
}

async function testDirectEscalation() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (!apiId || !apiHash || !phoneNumber) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ .env:');
    console.error('   API_ID, API_HASH, PHONE_NUMBER');
    console.error('\n–ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org');
    process.exit(1);
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
  let stringSession = '';
  const sessionFile = './anon.session';

  if (fs.existsSync(sessionFile)) {
    try {
      stringSession = fs.readFileSync(sessionFile, 'utf-8').trim();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è');
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
  }

  const client = new TelegramClient(
    new StringSession(stringSession),
    apiId,
    apiHash,
    {
      connectionRetries: 5,
    }
  );

  try {
    console.log('üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    await client.start({
      phoneNumber: async () => phoneNumber,
      password: async () => await question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å): '),
      phoneCode: async () => await question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '),
      onError: (err) => console.error('–û—à–∏–±–∫–∞:', err),
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    const newSession = client.session.save();
    if (newSession) {
      fs.writeFileSync(sessionFile, newSession);
      console.log('üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    }

    console.log('\nüìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:');
    console.log('1. –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)');
    console.log('2. –¢–µ—Å—Ç —Å –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    console.log('3. –¢–µ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π');

    const testType = await question('–í—ã–±–µ—Ä–∏—Ç–µ (1-3): ');

    if (testType === '1') {
      // –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      const testClientId = await question('–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram: ');
      const testClientName = await question('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ');

      const { text, entities } = formatWithMention(
        testClientId,
        testClientName,
        '–•–æ—á—É –∫—É–ø–∏—Ç—å –∫—É—Ä—Å –î–ù–ö –¶–í–ï–¢–ê'
      );

      console.log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline mention...`);

      try {
        await client.sendMessage(MANAGER_USERNAME, {
          message: text,
          formattingEntities: entities
        });

        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
        console.log('üëÜ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º');

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
      }

    } else if (testType === '2') {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ mention
      const simpleMessage = `üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï

–ö–ª–∏–µ–Ω—Ç: –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
ID: 123456789
–ó–∞–ø—Ä–æ—Å: "–•–æ—á—É –∫—É–ø–∏—Ç—å –∫—É—Ä—Å"

‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç —Å –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º ID, —Å—Å—ã–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å

‚è∞ ${new Date().toLocaleString('ru-RU')}`;

      console.log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...`);

      await client.sendMessage(MANAGER_USERNAME, {
        message: simpleMessage
      });

      console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

    } else if (testType === '3') {
      // –¢–µ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
      const buttonMessage = `üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –° –ö–ù–û–ü–ö–û–ô

–ö–ª–∏–µ–Ω—Ç: –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞
ID: 123456789
–ó–∞–ø—Ä–æ—Å: "–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É

‚è∞ ${new Date().toLocaleString('ru-RU')}`;

      const button = [
        [
          new Api.KeyboardButtonUrl({
            text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É',
            url: 'tg://user?id=123456789'
          })
        ]
      ];

      console.log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π...`);

      try {
        await client.sendMessage(MANAGER_USERNAME, {
          message: buttonMessage,
          buttons: button
        });

        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        console.log('üîò –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–∏–¥–∏—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É');

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π:', error.message);
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    console.log('\nüìä –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã? (y/n)');
    const testMore = await question('');

    if (testMore.toLowerCase() === 'y') {
      const realClientId = await question('–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤: ');
      const realClientName = await question('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: ');

      const testCases = [
        {
          priority: 'üî¥',
          reason: 'üõí –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
          message: '–•–æ—á—É –∫—É–ø–∏—Ç—å –∫—É—Ä—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!'
        },
        {
          priority: 'üü°',
          reason: 'üí≥ –í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ',
          message: '–ú–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É?'
        },
        {
          priority: 'üü¢',
          reason: 'üìã –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫—É—Ä—Å–∞',
          message: '–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É'
        }
      ];

      for (const testCase of testCases) {
        console.log(`\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç "${testCase.reason}"? (y/n)`);
        const send = await question('');

        if (send.toLowerCase() === 'y') {
          let msg = `${testCase.priority} –¢–ï–°–¢ –≠–°–ö–ê–õ–ê–¶–ò–ò\n\n`;
          msg += `–ü—Ä–∏—á–∏–Ω–∞: ${testCase.reason}\n`;
          msg += `–ö–ª–∏–µ–Ω—Ç: `;

          const offset = msg.length;
          msg += realClientName;

          const entities = [createUserMention(realClientId, realClientName, offset)];

          msg += `\n–°–æ–æ–±—â–µ–Ω–∏–µ: "${testCase.message}"\n\n`;
          msg += `‚è∞ ${new Date().toLocaleString('ru-RU')}`;

          await client.sendMessage(MANAGER_USERNAME, {
            message: msg,
            formattingEntities: entities
          });

          console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π');
        }
      }
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    console.log('\nüëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...');
    await client.disconnect();
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫
testDirectEscalation().catch(console.error);
