const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú –° –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–• –†–ê–ó –ò –ù–ê–í–°–ï–ì–î–ê\n');

// 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
console.log('1Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...');
const dbFiles = ['courses.db', 'conversations.db'];
dbFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    fs.unlinkSync(filePath);
    console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω ${file}`);
  }
});

// 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –∫—É—Ä—Å–æ–≤
console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∫—É—Ä—Å–æ–≤...');
try {
  execSync('bun run init-courses-db.js', { stdio: 'inherit' });
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –∫—É—Ä—Å–æ–≤:', error.message);
}

// 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∏–∞–ª–æ–≥–æ–≤
console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∏–∞–ª–æ–≥–æ–≤...');
const createConversationsDB = `
const Database = require('bun:sqlite').default;
const db = new Database('conversations.db');

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
db.run(\`
  CREATE TABLE IF NOT EXISTS conversations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId TEXT NOT NULL UNIQUE,
    userName TEXT NOT NULL,
    userPhone TEXT,
    lastMessageAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    followUpScheduled DATETIME,
    clientStatus TEXT DEFAULT 'new',
    interestedProducts TEXT DEFAULT '[]',
    notes TEXT,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
  )
\`);

db.run(\`
  CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    conversationId INTEGER NOT NULL,
    role TEXT NOT NULL,
    content TEXT NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (conversationId) REFERENCES conversations(id)
  )
\`);

db.run(\`
  CREATE TABLE IF NOT EXISTS follow_ups (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    conversationId INTEGER NOT NULL,
    scheduledAt DATETIME NOT NULL,
    completed BOOLEAN DEFAULT 0,
    message TEXT,
    FOREIGN KEY (conversationId) REFERENCES conversations(id)
  )
\`);

// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
db.run('CREATE INDEX IF NOT EXISTS idx_conversations_userId ON conversations(userId)');
db.run('CREATE INDEX IF NOT EXISTS idx_messages_conversationId ON messages(conversationId)');
db.run('CREATE INDEX IF NOT EXISTS idx_follow_ups_scheduledAt ON follow_ups(scheduledAt)');

console.log('‚úÖ –ë–∞–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞');
db.close();
`;

fs.writeFileSync('create-conversations-temp.js', createConversationsDB);
try {
  execSync('bun run create-conversations-temp.js', { stdio: 'inherit' });
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∏–∞–ª–æ–≥–æ–≤:', error.message);
}
fs.unlinkSync('create-conversations-temp.js');

// 4. –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
console.log('\n4Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...');
const adminPath = path.join(__dirname, '..', 'telegram-admin-bot');
if (fs.existsSync(adminPath)) {
  dbFiles.forEach(file => {
    const srcPath = path.join(__dirname, file);
    const destPath = path.join(adminPath, file);
    if (fs.existsSync(srcPath)) {
      fs.copyFileSync(srcPath, destPath);
      console.log(`   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ${file}`);
    }
  });
}

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
console.log('\n5Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
dbFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    try {
      fs.chmodSync(filePath, 0o666);
      console.log(`   ‚úÖ –ü—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${file}`);
    } catch (error) {
      console.warn(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è ${file}`);
    }
  }
});

// 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
console.log('\n6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
const Database = require('bun:sqlite').default;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∫—É—Ä—Å–æ–≤
try {
  const coursesDb = new Database('courses.db');
  const count = coursesDb.prepare('SELECT COUNT(*) as count FROM courses').get();
  console.log(`   ‚úÖ –ë–∞–∑–∞ –∫—É—Ä—Å–æ–≤: ${count.count} –∑–∞–ø–∏—Å–µ–π`);
  coursesDb.close();
} catch (error) {
  console.error(`   ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –∫—É—Ä—Å–æ–≤: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∏–∞–ª–æ–≥–æ–≤
try {
  const convDb = new Database('conversations.db');
  const tables = convDb.prepare("SELECT name FROM sqlite_master WHERE type='table'").all();
  console.log(`   ‚úÖ –ë–∞–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤: ${tables.length} —Ç–∞–±–ª–∏—Ü (${tables.map(t => t.name).join(', ')})`);
  convDb.close();
} catch (error) {
  console.error(`   ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∏–∞–ª–æ–≥–æ–≤: ${error.message}`);
}

console.log('\n‚úÖ –í–°–ï –ì–û–¢–û–í–û! –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.');
console.log('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: bun start');
