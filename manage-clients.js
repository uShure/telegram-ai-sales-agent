#!/usr/bin/env bun

import Database from 'bun:sqlite';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

console.log('üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê–ú–ò');
console.log('=' .repeat(60));

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new Database('./conversations.db');

async function showMenu() {
  console.log('\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n');
  console.log('1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
  console.log('2. –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º');
  console.log('3. –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞');
  console.log('4. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏');
  console.log('5. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –≤ —Ñ–∞–π–ª');
  console.log('6. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  console.log('0. –í—ã—Ö–æ–¥');

  const choice = await question('\nüëâ –í–∞—à –≤—ã–±–æ—Ä: ');

  switch(choice) {
    case '1':
      await showAllClients();
      break;
    case '2':
      await showClientDialog();
      break;
    case '3':
      await deleteClient();
      break;
    case '4':
      await deleteOldDialogs();
      break;
    case '5':
      await exportDialogs();
      break;
    case '6':
      await showStatistics();
      break;
    case '0':
      console.log('\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
      db.close();
      rl.close();
      process.exit(0);
    default:
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
  }

  await showMenu();
}

async function showAllClients() {
  console.log('\nüìä –°–ü–ò–°–û–ö –ö–õ–ò–ï–ù–¢–û–í');
  console.log('-'.repeat(60));

  const clients = db.prepare(`
    SELECT
      userId,
      userName,
      clientStatus,
      COUNT(*) as messageCount,
      MIN(createdAt) as firstMessage,
      MAX(lastMessageAt) as lastMessage
    FROM conversations
    GROUP BY userId
    ORDER BY lastMessage DESC
  `).all();

  if (clients.length === 0) {
    console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞');
    return;
  }

  clients.forEach((client, index) => {
    const lastDate = new Date(client.lastMessage).toLocaleString('ru-RU');
    const firstDate = new Date(client.firstMessage).toLocaleString('ru-RU');

    console.log(`\n${index + 1}. ${client.userName || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${client.userId})`);
    console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${client.clientStatus || 'new'}`);
    console.log(`   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${client.messageCount}`);
    console.log(`   üìÖ –ü–µ—Ä–≤–æ–µ: ${firstDate}`);
    console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${lastDate}`);
  });
}

async function showClientDialog() {
  const userId = await question('\nüí° –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞: ');

  const messages = db.prepare(`
    SELECT messages, createdAt, lastMessageAt
    FROM conversations
    WHERE userId = ?
    ORDER BY createdAt DESC
    LIMIT 1
  `).get(parseInt(userId));

  if (!messages) {
    console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  console.log('\nüí¨ –î–ò–ê–õ–û–ì');
  console.log('-'.repeat(60));

  try {
    const dialog = JSON.parse(messages.messages);
    dialog.forEach(msg => {
      const time = new Date(msg.timestamp).toLocaleString('ru-RU');
      const role = msg.role === 'user' ? 'üë§ –ö–ª–∏–µ–Ω—Ç' : 'ü§ñ –í–µ—Ä–∞';
      console.log(`\n[${time}] ${role}:`);
      console.log(msg.content.substring(0, 200));
      if (msg.content.length > 200) console.log('...');
    });
  } catch (e) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞');
  }
}

async function deleteClient() {
  await showAllClients();

  const userId = await question('\nüí° –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ');

  if (!userId) return;

  const client = db.prepare('SELECT userName FROM conversations WHERE userId = ? LIMIT 1').get(parseInt(userId));

  if (!client) {
    console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const confirm = await question(`\n‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ ${client.userName}? (–¥–∞/–Ω–µ—Ç): `);

  if (confirm.toLowerCase() === '–¥–∞') {
    const result = db.prepare('DELETE FROM conversations WHERE userId = ?').run(parseInt(userId));
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.changes}`);
  } else {
    console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
  }
}

async function deleteOldDialogs() {
  const days = await question('\nüí° –£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —Å–∫–æ–ª—å–∫–∏ –¥–Ω–µ–π? ');

  const daysAgo = new Date();
  daysAgo.setDate(daysAgo.getDate() - parseInt(days));

  const oldDialogs = db.prepare(`
    SELECT COUNT(*) as count
    FROM conversations
    WHERE lastMessageAt < ?
  `).get(daysAgo.toISOString());

  console.log(`\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${oldDialogs.count}`);

  const confirm = await question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ');

  if (confirm.toLowerCase() === '–¥–∞') {
    const result = db.prepare('DELETE FROM conversations WHERE lastMessageAt < ?').run(daysAgo.toISOString());
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.changes}`);
  } else {
    console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
  }
}

async function exportDialogs() {
  const userId = await question('\nüí° ID –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö): ');

  let data;
  if (userId) {
    data = db.prepare('SELECT * FROM conversations WHERE userId = ?').all(parseInt(userId));
  } else {
    data = db.prepare('SELECT * FROM conversations').all();
  }

  const filename = `export-${Date.now()}.json`;
  await Bun.write(filename, JSON.stringify(data, null, 2));

  console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª: ${filename}`);
  console.log(`üìä –ó–∞–ø–∏—Å–µ–π: ${data.length}`);
}

async function showStatistics() {
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  console.log('-'.repeat(60));

  const stats = db.prepare(`
    SELECT
      COUNT(DISTINCT userId) as uniqueClients,
      COUNT(*) as totalConversations,
      COUNT(CASE WHEN clientStatus = 'purchased' THEN 1 END) as purchased,
      COUNT(CASE WHEN clientStatus = 'interested' THEN 1 END) as interested,
      COUNT(CASE WHEN clientStatus = 'negotiating' THEN 1 END) as negotiating,
      COUNT(CASE WHEN clientStatus = 'lost' THEN 1 END) as lost,
      COUNT(CASE WHEN clientStatus = 'new' OR clientStatus IS NULL THEN 1 END) as new
    FROM conversations
  `).get();

  console.log(`\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${stats.uniqueClients}`);
  console.log(`üí¨ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${stats.totalConversations}`);
  console.log('\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
  console.log(`  üÜï –ù–æ–≤—ã–µ: ${stats.new}`);
  console.log(`  üíö –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ: ${stats.interested}`);
  console.log(`  üí¨ –í –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö: ${stats.negotiating}`);
  console.log(`  ‚úÖ –ö—É–ø–∏–ª–∏: ${stats.purchased}`);
  console.log(`  ‚ùå –ü–æ—Ç–µ—Ä—è–Ω—ã: ${stats.lost}`);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
  const byDay = db.prepare(`
    SELECT
      DATE(createdAt) as day,
      COUNT(*) as count
    FROM conversations
    WHERE createdAt > datetime('now', '-7 days')
    GROUP BY DATE(createdAt)
    ORDER BY day DESC
  `).all();

  console.log('\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:');
  byDay.forEach(day => {
    console.log(`  ${day.day}: ${day.count} –¥–∏–∞–ª–æ–≥–æ–≤`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é
showMenu();
