/**
 * –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MTProto API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –∏–º–µ–Ω–∏ userbot
 */

import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import dotenv from 'dotenv';

dotenv.config();

// Username –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const MANAGER_USERNAME = 'natalylini';

// –ò—Å—Ç–æ—Ä–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
const escalationHistory = new Map<string, Date>();

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
interface ManagerNotification {
  clientName: string;
  clientId: string;
  clientUsername?: string;
  clientMessage: string;
  reason: string;
  category: string;
  priority: 'high' | 'medium' | 'low';
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
 */
export async function sendManagerNotificationDirect(
  client: TelegramClient,
  notification: ManagerNotification
): Promise<boolean> {
  try {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É @${MANAGER_USERNAME}...`);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = formatNotificationMessage(notification);

    // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
    const buttons = createClientButtons(notification);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é
    try {
      await client.sendMessage(MANAGER_USERNAME, {
        message: message,
        buttons: buttons
      });

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç');
      console.log('   –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —ç—Å–∫–∞–ª–∞—Ü–∏–π
      escalationHistory.set(notification.clientId, new Date());

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await saveEscalationToDatabase(notification);

      return true;

    } catch (error: any) {
      if (error.message.includes('USER_NOT_MUTUAL_CONTACT')) {
        console.log('‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫...');

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        try {
          const result = await client.invoke(
            new Api.contacts.Search({
              q: MANAGER_USERNAME,
              limit: 1
            })
          );

          if (result.users.length > 0) {
            const manager = result.users[0];
            await client.sendMessage(manager, {
              message: message,
              buttons: buttons
            });

            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫');
            escalationHistory.set(notification.clientId, new Date());
            return true;
          }
        } catch (searchError) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', searchError);
        }
      }

      throw error;
    }

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error.message);

    // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–æ–∫...');

    try {
      const simpleMessage = formatSimpleMessage(notification);

      await client.sendMessage(MANAGER_USERNAME, {
        message: simpleMessage
      });

      console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      escalationHistory.set(notification.clientId, new Date());
      await saveEscalationToDatabase(notification);
      return true;

    } catch (fallbackError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', fallbackError);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      await saveNotificationForLater(notification);
      return false;
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
 */
function createClientButtons(notification: ManagerNotification): any[][] {
  const buttons = [];

  // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É
  const mainButton = {
    text: `üí¨ –ù–∞–ø–∏—Å–∞—Ç—å ${notification.clientName}`,
    url: `tg://user?id=${notification.clientId}`
  };

  buttons.push([mainButton]);

  // –ï—Å–ª–∏ –µ—Å—Ç—å username, –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  if (notification.clientUsername) {
    buttons.push([{
      text: `üì± @${notification.clientUsername}`,
      url: `https://t.me/${notification.clientUsername}`
    }]);
  }

  // –î–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  if (notification.priority === 'high') {
    buttons.push([{
      text: 'üö® –°—Ä–æ—á–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å',
      url: `tg://user?id=${notification.clientId}`
    }]);
  }

  return buttons;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
function formatNotificationMessage(notification: ManagerNotification): string {
  const priorityEmoji = {
    high: 'üî¥',
    medium: 'üü°',
    low: 'üü¢'
  };

  const emoji = priorityEmoji[notification.priority];

  let message = `${emoji} –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨ –ú–ï–ù–ï–î–ñ–ï–†–ê\n\n`;
  message += `üìã –ü—Ä–∏—á–∏–Ω–∞: ${notification.reason}\n`;
  message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${notification.clientName}\n`;
  message += `üÜî ID: ${notification.clientId}\n`;

  if (notification.clientUsername) {
    message += `üì± Username: @${notification.clientUsername}\n`;
  }

  message += `\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:\n"${notification.clientMessage}"\n\n`;

  if (notification.priority === 'high') {
    message += `‚ö° –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n`;
  }

  message += `üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É\n\n`;

  message += `‚è∞ ${new Date().toLocaleString('ru-RU')}\n`;
  message += `#—ç—Å–∫–∞–ª–∞—Ü–∏—è #${notification.category}`;

  return message;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
 */
function formatSimpleMessage(notification: ManagerNotification): string {
  const priorityEmoji = {
    high: 'üî¥',
    medium: 'üü°',
    low: 'üü¢'
  };

  const emoji = priorityEmoji[notification.priority];

  let message = `${emoji} –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨ –ú–ï–ù–ï–î–ñ–ï–†–ê\n\n`;
  message += `üìã –ü—Ä–∏—á–∏–Ω–∞: ${notification.reason}\n`;
  message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${notification.clientName}\n`;
  message += `üÜî ID –¥–ª—è –ø–æ–∏—Å–∫–∞: ${notification.clientId}\n`;

  if (notification.clientUsername) {
    message += `üì± –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑: @${notification.clientUsername}\n`;
  }

  message += `\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:\n"${notification.clientMessage}"\n\n`;

  if (notification.priority === 'high') {
    message += `‚ö° –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n`;
  }

  message += `üîç –ö–∞–∫ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞:\n`;
  message += `1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID: ${notification.clientId}\n`;
  message += `2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤ Telegram\n`;

  if (notification.clientUsername) {
    message += `3. –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –ø–æ username: @${notification.clientUsername}\n`;
  }

  message += `\n‚è∞ ${new Date().toLocaleString('ru-RU')}\n`;
  message += `#—ç—Å–∫–∞–ª–∞—Ü–∏—è #${notification.category}`;

  return message;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function saveEscalationToDatabase(notification: ManagerNotification): Promise<void> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { database } = await import('../database/database');

    await database.run(`
      INSERT INTO escalations (
        client_id,
        client_name,
        category,
        reason,
        priority,
        message,
        created_at
      ) VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
    `, [
      notification.clientId,
      notification.clientName,
      notification.category,
      notification.reason,
      notification.priority,
      notification.clientMessage
    ]);

    console.log('üíæ –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ –ë–î:', error);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function saveNotificationForLater(notification: ManagerNotification): Promise<void> {
  try {
    const { database } = await import('../database/database');

    const notificationData = {
      ...notification,
      timestamp: new Date().toISOString(),
      sent: false
    };

    await database.run(`
      INSERT INTO pending_notifications (data, created_at)
      VALUES (?, datetime('now'))
    `, JSON.stringify(notificationData));

    console.log('üíæ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–∞–≤–Ω–æ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω
 */
export function wasClientRecentlyEscalated(clientId: string): boolean {
  const lastEscalation = escalationHistory.get(clientId);
  if (!lastEscalation) return false;

  // –ù–µ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
  const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
  return lastEscalation > thirtyMinutesAgo;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function sendPendingNotifications(client: TelegramClient): Promise<void> {
  try {
    const { database } = await import('../database/database');

    const pending = await database.all(`
      SELECT * FROM pending_notifications
      WHERE sent = 0
      ORDER BY created_at ASC
      LIMIT 10
    `);

    for (const row of pending) {
      const notification = JSON.parse(row.data);
      const success = await sendManagerNotificationDirect(client, notification);

      if (success) {
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await database.run(`
          UPDATE pending_notifications
          SET sent = 1, sent_at = datetime('now')
          WHERE id = ?
        `, row.id);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function initializeNotificationTables(): Promise<void> {
  try {
    const { database } = await import('../database/database');

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await database.run(`
      CREATE TABLE IF NOT EXISTS pending_notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        data TEXT NOT NULL,
        sent BOOLEAN DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        sent_at DATETIME
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–π
    await database.run(`
      CREATE TABLE IF NOT EXISTS escalations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        client_id TEXT NOT NULL,
        client_name TEXT,
        category TEXT,
        reason TEXT,
        priority TEXT,
        message TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
 */
export async function sendTestNotification(client: TelegramClient): Promise<boolean> {
  const testNotification: ManagerNotification = {
    clientName: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
    clientId: '123456789',
    clientUsername: 'test_client',
    clientMessage: '–•–æ—á—É –∫—É–ø–∏—Ç—å –∫—É—Ä—Å –î–ù–ö –¶–í–ï–¢–ê, –ø–æ–º–æ–≥–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
    reason: 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç—Å–∫–∞–ª–∞—Ü–∏–∏',
    category: 'test',
    priority: 'high'
  };

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É...');

  const result = await sendManagerNotificationDirect(client, testNotification);

  if (result) {
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @' + MANAGER_USERNAME);
    console.log('üîò –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É');
  } else {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É');
  }

  return result;
}
