import { logger } from './logger';
import { managerNotificationService } from '../services/managerNotificationMTProto';

export interface EscalationContext {
  userId: number;
  userInfo: {
    firstName?: string;
    lastName?: string;
    username?: string;
    phoneNumber?: string;
  };
  conversationHistory: Array<{
    role: 'user' | 'assistant';
    content: string;
    timestamp: Date;
  }>;
  escalationReason: string;
  urgencyLevel: 'low' | 'medium' | 'high' | 'critical';
}

export class ManagerEscalationService {
  private static instance: ManagerEscalationService;

  public static getInstance(): ManagerEscalationService {
    if (!ManagerEscalationService.instance) {
      ManagerEscalationService.instance = new ManagerEscalationService();
    }
    return ManagerEscalationService.instance;
  }

  /**
   * –≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (MTProto)
   */
  async escalateToManager(context: EscalationContext): Promise<boolean> {
    try {
      logger.info('Starting manager escalation for user:', context.userId);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const escalationMessage = this.formatEscalationMessage(context);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ MTProto
      const success = await managerNotificationService.sendManagerNotification(
        escalationMessage,
        context.urgencyLevel
      );

      if (success) {
        logger.info('Manager escalation successful for user:', context.userId);
        return true;
      } else {
        logger.error('Failed to escalate to manager for user:', context.userId);
        return false;
      }
    } catch (error) {
      logger.error('Error during manager escalation:', error);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
   */
  private formatEscalationMessage(context: EscalationContext): string {
    const { userInfo, conversationHistory, escalationReason, urgencyLevel } = context;

    let message = `üö® –≠–°–ö–ê–õ–ê–¶–ò–Ø –ö –ú–ï–ù–ï–î–ñ–ï–†–£\n\n`;
    message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${userInfo.firstName || ''} ${userInfo.lastName || ''}`;
    
    if (userInfo.username) {
      message += ` (@${userInfo.username})`;
    }
    
    if (userInfo.phoneNumber) {
      message += `\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${userInfo.phoneNumber}`;
    }

    message += `\nüî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.getUrgencyEmoji(urgencyLevel)} ${urgencyLevel.toUpperCase()}`;
    message += `\n‚ùó –ü—Ä–∏—á–∏–Ω–∞: ${escalationReason}\n\n`;

    message += `üìù –ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê:\n`;
    message += `${'='.repeat(40)}\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const recentMessages = conversationHistory.slice(-5);
    recentMessages.forEach((msg, index) => {
      const role = msg.role === 'user' ? 'üë§ –ö–ª–∏–µ–Ω—Ç' : 'ü§ñ –ò–ò';
      const time = msg.timestamp.toLocaleString('ru-RU');
      message += `\n${role} (${time}):\n${msg.content}\n`;
      
      if (index < recentMessages.length - 1) {
        message += `${'-'.repeat(30)}\n`;
      }
    });

    message += `\n${'='.repeat(40)}\n`;
    message += `\n‚è∞ –í—Ä–µ–º—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏: ${new Date().toLocaleString('ru-RU')}`;
    message += `\nüÜî ID –∫–ª–∏–µ–Ω—Ç–∞: ${context.userId}`;

    return message;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
   */
  private getUrgencyEmoji(urgencyLevel: string): string {
    switch (urgencyLevel) {
      case 'critical': return 'üî¥';
      case 'high': return 'üü†';
      case 'medium': return 'üü°';
      case 'low': return 'üü¢';
      default: return '‚ö™';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  shouldEscalate(conversationHistory: any[], lastUserMessage: string): boolean {
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    const escalationKeywords = [
      '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–∂–∞–ª–æ–±–∞', '–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '–ø—Ä–æ–±–ª–µ–º–∞',
      '–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º', '–∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫', '–æ–ø–µ—Ä–∞—Ç–æ—Ä',
      '–Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç', '–ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –ø–æ–Ω–∏–º–∞—é',
      '—Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', '—Å–≤—è–∂–∏—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'
    ];

    const messageText = lastUserMessage.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const hasEscalationKeywords = escalationKeywords.some(keyword => 
      messageText.includes(keyword)
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–µ—Å–ª–∏ –±–æ–ª—å—à–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    const isLongConversation = conversationHistory.length > 10;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã
    const hasRepeatedQuestions = this.checkRepeatedQuestions(conversationHistory);

    return hasEscalationKeywords || (isLongConversation && hasRepeatedQuestions);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
   */
  determineUrgencyLevel(conversationHistory: any[], lastUserMessage: string): 'low' | 'medium' | 'high' | 'critical' {
    const messageText = lastUserMessage.toLowerCase();

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (messageText.includes('—Å—Ä–æ—á–Ω–æ') || messageText.includes('–∫—Ä–∏—Ç–∏—á–Ω–æ') || 
        messageText.includes('–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ')) {
      return 'critical';
    }

    // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (messageText.includes('–∂–∞–ª–æ–±–∞') || messageText.includes('–Ω–µ–¥–æ–≤–æ–ª–µ–Ω') ||
        messageText.includes('–ø—Ä–æ–±–ª–µ–º–∞')) {
      return 'high';
    }

    // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (conversationHistory.length > 10) {
      return 'medium';
    }

    // –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
    return 'low';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤
   */
  private checkRepeatedQuestions(conversationHistory: any[]): boolean {
    if (conversationHistory.length < 4) return false;

    const userMessages = conversationHistory
      .filter(msg => msg.role === 'user')
      .map(msg => msg.content.toLowerCase());

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for (let i = 0; i < userMessages.length - 1; i++) {
      for (let j = i + 1; j < userMessages.length; j++) {
        const similarity = this.calculateSimilarity(userMessages[i], userMessages[j]);
        if (similarity > 0.7) {
          return true;
        }
      }
    }

    return false;
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫
   */
  private calculateSimilarity(str1: string, str2: string): number {
    const words1 = str1.split(' ');
    const words2 = str2.split(' ');
    
    const commonWords = words1.filter(word => words2.includes(word));
    const totalWords = Math.max(words1.length, words2.length);
    
    return commonWords.length / totalWords;
  }
}

export const managerEscalationService = ManagerEscalationService.getInstance();