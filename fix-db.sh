#!/bin/bash

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
echo ""

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –±–∞–∑—ã
if [ -f "conversations.db" ]; then
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –±–∞–∑—ã..."
    mv conversations.db conversations.db.corrupt.backup
fi

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö conversations.db..."

cat > create-new-conversations-db.js << 'EOF'
const sqlite3 = require('sqlite3').verbose();

const db = new sqlite3.Database('conversations.db', (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
        process.exit(1);
    }
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
});

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
db.serialize(() => {
    // –¢–∞–±–ª–∏—Ü–∞ conversations
    db.run(`
        CREATE TABLE IF NOT EXISTS conversations (
            id TEXT PRIMARY KEY,
            userId TEXT NOT NULL,
            userName TEXT NOT NULL,
            userPhone TEXT,
            createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            lastMessageAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            clientStatus TEXT DEFAULT 'new',
            interestedProducts TEXT DEFAULT '[]'
        )
    `, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã conversations:', err);
        else console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ conversations —Å–æ–∑–¥–∞–Ω–∞');
    });

    // –¢–∞–±–ª–∏—Ü–∞ messages
    db.run(`
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            conversationId TEXT NOT NULL,
            role TEXT NOT NULL,
            content TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (conversationId) REFERENCES conversations(id)
        )
    `, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã messages:', err);
        else console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ messages —Å–æ–∑–¥–∞–Ω–∞');
    });

    // –¢–∞–±–ª–∏—Ü–∞ followUps
    db.run(`
        CREATE TABLE IF NOT EXISTS followUps (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            conversationId TEXT NOT NULL,
            scheduledFor DATETIME NOT NULL,
            sent BOOLEAN DEFAULT 0,
            sentAt DATETIME,
            FOREIGN KEY (conversationId) REFERENCES conversations(id)
        )
    `, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã followUps:', err);
        else console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ followUps —Å–æ–∑–¥–∞–Ω–∞');
    });

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    db.run('CREATE INDEX IF NOT EXISTS idx_messages_conversationId ON messages(conversationId)');
    db.run('CREATE INDEX IF NOT EXISTS idx_followUps_conversationId ON followUps(conversationId)');
    db.run('CREATE INDEX IF NOT EXISTS idx_followUps_scheduledFor ON followUps(scheduledFor)');
});

db.close((err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
    } else {
        console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö conversations.db —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    }
});
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
node create-new-conversations-db.js

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
rm create-new-conversations-db.js

echo ""
echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!"
echo ""
echo "üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π:"
echo "   bun start"
