import { EnhancedTelegramBot } from "./telegram/enhancedTelegramClient";
import { AdminPanel } from "./admin/adminPanel";
import readline from "readline";
import dotenv from "dotenv";

dotenv.config();

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

async function main() {
  console.log("ü§ñ SOINTERA AI Sales Agent (Enhanced)");
  console.log("=====================================\n");

  const bot = new EnhancedTelegramBot();
  const admin = new AdminPanel(bot as any);

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.start();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    showMenu();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    rl.on("line", async (input) => {
      const command = input.trim().toLowerCase();

      switch (command) {
        case "stats":
          await bot.getStats();
          break;

        case "conversations":
          await admin.listRecentConversations();
          break;

        case "analyze":
          const userId = await question("–í–≤–µ–¥–∏—Ç–µ User ID –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ");
          await admin.analyzeConversation(userId);
          break;

        case "send":
          const targetId = await question("–í–≤–µ–¥–∏—Ç–µ User ID: ");
          const message = await question("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ");
          await bot.sendProactiveMessage(targetId, message);
          break;

        case "export":
          await admin.exportConversations();
          break;

        case "help":
          showMenu();
          break;

        case "exit":
          console.log("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
          await bot.stop();
          process.exit(0);
          break;

        default:
          console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ "help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    process.on("SIGINT", async () => {
      console.log("\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");
      await bot.stop();
      process.exit(0);
    });
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
  }
}

function showMenu() {
  console.log("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
  console.log("  stats        - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
  console.log("  conversations - –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤");
  console.log("  analyze      - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º");
  console.log("  send         - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
  console.log("  export       - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –≤ CSV");
  console.log("  help         - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é");
  console.log("  exit         - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n");
}

function question(prompt: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main().catch(console.error);
