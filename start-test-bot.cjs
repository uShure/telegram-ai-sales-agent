const TelegramBot = require('node-telegram-bot-api');
const { AIAgent } = require('./src/ai/aiAgent.js');
const Database = require('bun:sqlite').default;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
const token = '8307724302:AAGrBdp1zAXlbqm8XQ3LkQt56P1he6zZFzc';
const bot = new TelegramBot(token, { polling: true });

console.log('ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç SOINTERA –∑–∞–ø—É—â–µ–Ω!');
console.log('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞–≥–µ–Ω—Ç–∞
const aiAgent = new AIAgent();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new Database('./conversations.db');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || '–ö–ª–∏–µ–Ω—Ç';
  
  await bot.sendMessage(chatId, 
    `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã\n\n` +
    `–Ø - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–∫–∞–¥–µ–º–∏–∏ SOINTERA! üéì\n\n` +
    `–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –≤–∞—Å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    const chatId = msg.chat.id;
    const userName = msg.from.first_name || '–ö–ª–∏–µ–Ω—Ç';
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
      let conversation = db.query('SELECT * FROM conversations WHERE userId = ?').get(chatId.toString());
      
      if (!conversation) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        db.run(\`
          INSERT INTO conversations (userId, userName, lastMessageAt, clientStatus, interestedProducts, createdAt, updatedAt)
          VALUES (?, ?, datetime('now'), 'new', '[]', datetime('now'), datetime('now'))
        \`, [chatId.toString(), userName]);
        
        conversation = { 
          id: db.query('SELECT last_insert_rowid() as id').get().id,
          messages: [] 
        };
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        const messages = db.query('SELECT * FROM messages WHERE conversationId = ? ORDER BY timestamp').all(conversation.id);
        conversation.messages = messages || [];
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      db.run(\`
        INSERT INTO messages (conversationId, role, content, timestamp)
        VALUES (?, 'user', ?, datetime('now'))
      \`, [conversation.id, msg.text]);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
      await bot.sendChatAction(chatId, 'typing');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
      const response = await aiAgent.generateResponse(conversation, msg.text);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      await bot.sendMessage(chatId, response.response);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
      db.run(\`
        INSERT INTO messages (conversationId, role, content, timestamp)
        VALUES (?, 'assistant', ?, datetime('now'))
      \`, [conversation.id, response.response]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞
      db.run(\`
        UPDATE conversations 
        SET lastMessageAt = datetime('now'), 
            clientStatus = ?,
            interestedProducts = ?,
            updatedAt = datetime('now')
        WHERE id = ?
      \`, [response.clientStatus, JSON.stringify(response.suggestedProducts), conversation.id]);
      
      console.log(\`üí¨ –î–∏–∞–ª–æ–≥ —Å ${userName}: ${response.clientStatus}\`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
});

console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
