/**
 * –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É
 */

import axios from 'axios';
import { database } from '../database/database';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const NOTIFICATION_BOT_TOKEN = process.env.NOTIFICATION_BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN || '';
const MANAGER_USERNAME = 'natalylini';
const MANAGER_CHAT_ID = process.env.MANAGER_CHAT_ID || ''; // –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ getUpdates

// –ò—Å—Ç–æ—Ä–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
const escalationHistory = new Map<string, Date>();

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
interface ManagerNotification {
  clientName: string;
  clientId: string;
  clientUsername?: string;
  clientMessage: string;
  reason: string;
  category: string;
  priority: 'high' | 'medium' | 'low';
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
 */
export async function sendManagerNotification(notification: ManagerNotification): Promise<boolean> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if (!NOTIFICATION_BOT_TOKEN) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å
    let managerChatId = MANAGER_CHAT_ID;
    if (!managerChatId) {
      managerChatId = await getManagerChatId();
      if (!managerChatId) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
        await saveNotificationForLater(notification);
        return false;
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = formatNotificationMessage(notification);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Bot API
    const response = await axios.post(
      `https://api.telegram.org/bot${NOTIFICATION_BOT_TOKEN}/sendMessage`,
      {
        chat_id: managerChatId,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      }
    );

    if (response.data.ok) {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —ç—Å–∫–∞–ª–∞—Ü–∏–π
      escalationHistory.set(notification.clientId, new Date());

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await saveEscalationToDatabase(notification);

      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', response.data);
      await saveNotificationForLater(notification);
      return false;
    }

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error.message);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    await saveNotificationForLater(notification);

    return false;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
function formatNotificationMessage(notification: ManagerNotification): string {
  const priorityEmoji = {
    high: 'üî¥',
    medium: 'üü°',
    low: 'üü¢'
  };

  const emoji = priorityEmoji[notification.priority];

  let message = `${emoji} *–ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï*\n\n`;
  message += `*–ü—Ä–∏—á–∏–Ω–∞:* ${notification.reason}\n`;
  message += `*–ö–ª–∏–µ–Ω—Ç:* ${notification.clientName}\n`;

  if (notification.clientUsername) {
    message += `*Username:* @${notification.clientUsername}\n`;
  }

  message += `*ID:* \`${notification.clientId}\`\n\n`;
  message += `*–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:*\n"${notification.clientMessage}"\n\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  if (notification.priority === 'high') {
    message += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç!*\n`;
  }

  message += `\nüìÖ ${new Date().toLocaleString('ru-RU')}\n`;
  message += `#${notification.category} #priority_${notification.priority}`;

  return message;
}

/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ username
 */
async function getManagerChatId(): Promise<string | null> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
    const response = await axios.get(
      `https://api.telegram.org/bot${NOTIFICATION_BOT_TOKEN}/getUpdates`
    );

    if (response.data.ok && response.data.result) {
      // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      for (const update of response.data.result) {
        if (update.message && update.message.from) {
          if (update.message.from.username === MANAGER_USERNAME) {
            const chatId = update.message.chat.id.toString();
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${chatId}`);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            process.env.MANAGER_CHAT_ID = chatId;

            return chatId;
          }
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    console.log(`
‚ö†Ô∏è Chat ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –º–µ–Ω–µ–¥–∂–µ—Ä @${MANAGER_USERNAME} –¥–æ–ª–∂–µ–Ω:
1. –ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –¥–æ–±–∞–≤—å—Ç–µ MANAGER_CHAT_ID –≤ .env —Ñ–∞–π–ª
    `);

    return null;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id:', error);
    return null;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function saveNotificationForLater(notification: ManagerNotification): Promise<void> {
  try {
    const notificationData = {
      ...notification,
      timestamp: new Date().toISOString(),
      sent: false
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await database.run(`
      INSERT INTO pending_notifications (data, created_at)
      VALUES (?, datetime('now'))
    `, JSON.stringify(notificationData));

    console.log('üíæ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function saveEscalationToDatabase(notification: ManagerNotification): Promise<void> {
  try {
    await database.run(`
      INSERT INTO escalations (
        client_id,
        client_name,
        category,
        reason,
        priority,
        message,
        created_at
      ) VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
    `, [
      notification.clientId,
      notification.clientName,
      notification.category,
      notification.reason,
      notification.priority,
      notification.clientMessage
    ]);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ –ë–î:', error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function sendPendingNotifications(): Promise<void> {
  try {
    const pending = await database.all(`
      SELECT * FROM pending_notifications
      WHERE sent = 0
      ORDER BY created_at ASC
      LIMIT 10
    `);

    for (const row of pending) {
      const notification = JSON.parse(row.data);
      const success = await sendManagerNotification(notification);

      if (success) {
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await database.run(`
          UPDATE pending_notifications
          SET sent = 1, sent_at = datetime('now')
          WHERE id = ?
        `, row.id);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–∞–≤–Ω–æ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω
 */
export function wasClientRecentlyEscalated(clientId: string): boolean {
  const lastEscalation = escalationHistory.get(clientId);
  if (!lastEscalation) return false;

  // –ù–µ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
  const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
  return lastEscalation > thirtyMinutesAgo;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function initializeNotificationTables(): Promise<void> {
  try {
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await database.run(`
      CREATE TABLE IF NOT EXISTS pending_notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        data TEXT NOT NULL,
        sent BOOLEAN DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        sent_at DATETIME
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–π
    await database.run(`
      CREATE TABLE IF NOT EXISTS escalations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        client_id TEXT NOT NULL,
        client_name TEXT,
        category TEXT,
        reason TEXT,
        priority TEXT,
        message TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
 */
export async function sendTestNotification(): Promise<boolean> {
  const testNotification: ManagerNotification = {
    clientName: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
    clientId: 'test_123',
    clientMessage: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
    reason: 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
    category: 'test',
    priority: 'low'
  };

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
  return await sendManagerNotification(testNotification);
}
