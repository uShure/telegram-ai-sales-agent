#!/usr/bin/env node

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏

import { isGeneralRequest, analyzeQualification, getQualificationQuestions } from './src/data/qualification-logic.js';
import { isAskingForDetails } from './src/data/detailed-presentations.js';
import { findFAQAnswer } from './src/data/faq-creative-village.js';
import { findObjectionResponse } from './src/data/objection-scenarios.js';

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ò–ì–ì–ï–†–û–í –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–ò\n');
console.log('=' .repeat(50));

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
const testPhrases = [
  // –î–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
  '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—É—Ä—Å—ã',
  '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –∫—É—Ä—Å—ã',
  '–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã',
  '–∫–∞–∫–∏–µ –µ—Å—Ç—å –∫—É—Ä—Å—ã',
  '—á—Ç–æ –µ—Å—Ç—å',
  '–≤—Å–µ –∫—É—Ä—Å—ã',
  '–ø—Ä–æ –æ–±—É—á–µ–Ω–∏–µ',
  '—Ö–æ—á—É —É—á–∏—Ç—å—Å—è',
  '–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã',
  '–æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã',

  // –ù–µ –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ)
  '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—É—Ä—Å—ã –ø–æ –∫–æ–ª–æ—Ä–∏—Å—Ç–∏–∫–µ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –¥–µ—Ä–µ–≤–Ω–µ',

  // –î–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–µ—Ç–∞–ª–∏
  '1',
  '2',
  '3',
  '–ø–µ—Ä–≤—ã–π',
  '–≤—Ç–æ—Ä–æ–π',
  '–ø—Ä–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç',
  '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –¥–Ω–∫',

  // FAQ –≤–æ–ø—Ä–æ—Å—ã
  '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –¥–µ—Ä–µ–≤–Ω—è',
  '—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å',
  '—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –≥—Ä—É–ø–ø–µ',

  // –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è
  '–¥–æ—Ä–æ–≥–æ',
  '60 —Ç—ã—Å—è—á —ç—Ç–æ –¥–æ—Ä–æ–≥–æ',
  '–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏',
  '–¥–∞–ª–µ–∫–æ –µ—Ö–∞—Ç—å',

  // –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è)
  '–≤—Å–µ –æ—á–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ–∫–∞–∂–∏',
  '–æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã –ø–æ –∫–æ–ª–æ—Ä–∏—Å—Ç–∏–∫–µ'
];

console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –§–†–ê–ó:\n');

testPhrases.forEach(phrase => {
  const isGeneral = isGeneralRequest(phrase);
  const isDetails = isAskingForDetails(phrase);
  const faqAnswer = findFAQAnswer(phrase);
  const objection = findObjectionResponse(phrase);

  console.log(`\n"${phrase}"`);
  console.log(`  –î–ª–∏–Ω–∞: ${phrase.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  console.log(`  ‚úÖ –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å (–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è): ${isGeneral ? '–î–ê' : '–ù–ï–¢'}`);
  console.log(`  üìñ –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π: ${isDetails ? '–î–ê' : '–ù–ï–¢'}`);
  console.log(`  ‚ùì FAQ: ${faqAnswer ? '–î–ê' : '–ù–ï–¢'}`);
  console.log(`  üí¨ –í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ: ${objection ? '–î–ê' : '–ù–ï–¢'}`);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–≤—ã–º
  let firstTrigger = '–ù–∏—á–µ–≥–æ';
  if (isGeneral && !isDetails) firstTrigger = 'üéØ –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–Ø';
  else if (isDetails) firstTrigger = 'üìñ –î–ï–¢–ê–õ–ò –ö–£–†–°–ê';
  else if (faqAnswer) firstTrigger = '‚ùì FAQ';
  else if (objection) firstTrigger = 'üí¨ –í–û–ó–†–ê–ñ–ï–ù–ò–ï';

  console.log(`  üèÜ –°—Ä–∞–±–æ—Ç–∞–µ—Ç: ${firstTrigger}`);
});

console.log('\n' + '=' .repeat(50));
console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –ê–ù–ê–õ–ò–ó–ê –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–ò:\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
const testDialogs = [
  ['–•–æ—á—É —É—á–∏—Ç—å—Å—è'],
  ['–•–æ—á—É —É—á–∏—Ç—å—Å—è', '–æ—á–Ω–æ'],
  ['–•–æ—á—É —É—á–∏—Ç—å—Å—è', '–æ—á–Ω–æ', '—Å—Ç—Ä–∏–∂–∫–∏'],
  ['–•–æ—á—É —É—á–∏—Ç—å—Å—è', '–æ—á–Ω–æ', '—Å—Ç—Ä–∏–∂–∫–∏', '5 –ª–µ—Ç —Ä–∞–±–æ—Ç–∞—é'],
  ['—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—É—Ä—Å—ã', '–æ–Ω–ª–∞–π–Ω', '–∫–æ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞', '–Ω–∞—á–∏–Ω–∞—é—â–∏–π']
];

testDialogs.forEach((messages, index) => {
  console.log(`\n–î–∏–∞–ª–æ–≥ ${index + 1}: ${messages.join(' ‚Üí ')}`);
  const qualification = analyzeQualification(messages);
  console.log(`  –§–æ—Ä–º–∞—Ç: ${qualification.format || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
  console.log(`  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${qualification.direction || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}`);
  console.log(`  –û–ø—ã—Ç: ${qualification.experience || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
  console.log(`  –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${qualification.qualified ? '–î–ê' : '–ù–ï–¢'}`);

  if (!qualification.qualified) {
    const questions = getQualificationQuestions(qualification);
    console.log(`  –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: ${questions.split('\n')[0].substring(0, 50)}...`);
  }
});

console.log('\n' + '=' .repeat(50));
console.log('\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
console.log('1. "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—É—Ä—Å—ã" –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é');
console.log('2. –ß–∏—Å–ª–∞ 1,2,3 –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞');
console.log('3. FAQ –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑');
console.log('4. –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∫–æ–≥–¥–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã —Ñ–æ—Ä–º–∞—Ç + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
console.log('\n');
