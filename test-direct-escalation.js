#!/usr/bin/env bun

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é –æ—Ç userbot
 */

const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const readline = require('readline');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const apiId = parseInt(process.env.API_ID || '0');
const apiHash = process.env.API_HASH || '';
const phoneNumber = process.env.PHONE_NUMBER || '';
const MANAGER_USERNAME = 'natalylini';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function testDirectEscalation() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (!apiId || !apiHash || !phoneNumber) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ .env:');
    console.error('   API_ID, API_HASH, PHONE_NUMBER');
    console.error('\n–ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org');
    process.exit(1);
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
  let stringSession = '';
  const sessionFile = './anon.session';

  if (fs.existsSync(sessionFile)) {
    try {
      stringSession = fs.readFileSync(sessionFile, 'utf-8').trim();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è');
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
  }

  const client = new TelegramClient(
    new StringSession(stringSession),
    apiId,
    apiHash,
    {
      connectionRetries: 5,
    }
  );

  try {
    console.log('üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    await client.start({
      phoneNumber: async () => phoneNumber,
      password: async () => await question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å): '),
      phoneCode: async () => await question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '),
      onError: (err) => console.error('–û—à–∏–±–∫–∞:', err),
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    const newSession = client.session.save();
    if (newSession) {
      fs.writeFileSync(sessionFile, newSession);
      console.log('üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage = `üß™ **–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï**

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞.

**–ö–ª–∏–µ–Ω—Ç:** –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞
**Username:** @anna_test
**–ó–∞–ø—Ä–æ—Å:** "–•–æ—á—É –∫—É–ø–∏—Ç—å –∫—É—Ä—Å –î–ù–ö –¶–í–ï–¢–ê"

–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —ç—Å–∫–∞–ª–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

‚è∞ ${new Date().toLocaleString('ru-RU')}

#—Ç–µ—Å—Ç #—ç—Å–∫–∞–ª–∞—Ü–∏—è`;

    console.log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É @${MANAGER_USERNAME}...`);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await client.sendMessage(MANAGER_USERNAME, {
        message: testMessage,
        parseMode: 'markdown'
      });

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      console.log(`üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å @${MANAGER_USERNAME}`);

    } catch (error) {
      if (error.message.includes('USER_NOT_MUTUAL_CONTACT')) {
        console.log('‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö, –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫...');

        try {
          // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { Api } = require('telegram');
          const result = await client.invoke(
            new Api.contacts.Search({
              q: MANAGER_USERNAME,
              limit: 1
            })
          );

          if (result.users && result.users.length > 0) {
            const manager = result.users[0];

            await client.sendMessage(manager, {
              message: testMessage,
              parseMode: 'markdown'
            });

            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫!');
          } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
            console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username');
            console.log('2. –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
            console.log('3. –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç');
          }
        } catch (searchError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', searchError.message);
        }
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    console.log('\nüìä –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —ç—Å–∫–∞–ª–∞—Ü–∏–∏? (y/n)');
    const testMore = await question('');

    if (testMore.toLowerCase() === 'y') {
      const testCases = [
        {
          priority: 'üî¥',
          reason: 'üõí –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
          message: '–•–æ—á—É –∫—É–ø–∏—Ç—å –∫—É—Ä—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!'
        },
        {
          priority: 'üü°',
          reason: 'üí≥ –í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ',
          message: '–ú–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É?'
        },
        {
          priority: 'üü¢',
          reason: 'üìã –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫—É—Ä—Å–∞',
          message: '–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É'
        }
      ];

      for (const testCase of testCases) {
        console.log(`\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç "${testCase.reason}"? (y/n)`);
        const send = await question('');

        if (send.toLowerCase() === 'y') {
          const msg = `${testCase.priority} **–¢–ï–°–¢ –≠–°–ö–ê–õ–ê–¶–ò–ò**

**–ü—Ä–∏—á–∏–Ω–∞:** ${testCase.reason}
**–ö–ª–∏–µ–Ω—Ç:** –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
**–°–æ–æ–±—â–µ–Ω–∏–µ:** "${testCase.message}"

‚è∞ ${new Date().toLocaleString('ru-RU')}`;

          await client.sendMessage(MANAGER_USERNAME, {
            message: msg,
            parseMode: 'markdown'
          });

          console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        }
      }
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    console.log('\nüëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...');
    await client.disconnect();
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫
testDirectEscalation().catch(console.error);
