const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
const filePath = path.join(__dirname, 'src/database/coursesDB.ts');
let content = fs.readFileSync(filePath, 'utf8');

// –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–æ–¥ searchCourses
const methodStart = content.indexOf('async searchCourses(keywords: string)');
const methodEnd = content.indexOf('}', content.indexOf('} catch (err)', methodStart)) + 1;

// –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
const newMethod = `async searchCourses(keywords: string): Promise<Course[]> {
    try {
      const query = \`
        SELECT * FROM courses
        WHERE (
          LOWER(name) LIKE LOWER(?) OR
          LOWER(description) LIKE LOWER(?) OR
          LOWER(targetAudience) LIKE LOWER(?) OR
          LOWER(benefits) LIKE LOWER(?)
        ) AND active = 1
        ORDER BY price ASC
      \`;
      const searchPattern = \`%\${keywords}%\`;
      const rows = this.db.prepare(query).all(
        searchPattern,
        searchPattern,
        searchPattern,
        searchPattern
      ) as Course[];
      console.log(\`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "\${keywords}": \${rows.length}\`);
      if (rows.length > 0) {
        console.log(\`üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã: \${rows.map(r => r.name).join(', ')}\`);
      }
      return rows;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤:', err);
      return [];
    }
  }`;

// –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
content = content.substring(0, methodStart) + newMethod + content.substring(methodEnd);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
fs.writeFileSync(filePath, content);
console.log('‚úÖ –ú–µ—Ç–æ–¥ searchCourses –æ–±–Ω–æ–≤–ª–µ–Ω —Å LOWER() –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞');
