import { Database } from "bun:sqlite";
import path from "node:path";
import { formatCourseDate } from "../data/courseDates";
import { logger } from "../utils/logger";
import { coursesCache, createCacheKey } from "../utils/cache";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫—É—Ä—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export interface Course {
  id: number;
  name: string;
  price: number;
  description: string;
  duration: string;
  benefits: string;
  targetAudience: string;
  curriculum: string;
  enrollmentUrl: string;
  active: number;
  format?: string; // –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
  category?: string;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export interface ExternalCourse extends Course {
  url: string;
}

class CoursesDatabase {
  private db: Database;

  constructor() {
    const dbPath = path.join(process.cwd(), "courses.db");
    console.log("üìö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:", dbPath);

    try {
      this.db = new Database(dbPath);
      console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –∫—É—Ä—Å–æ–≤:", err);
      throw err;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã
  async getAllCourses(): Promise<Course[]> {
    try {
      const query = `
        SELECT * FROM courses
        WHERE active = 1
        ORDER BY price ASC
      `;
      const rows = this.db.prepare(query).all() as Course[];
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rows.length} –∫—É—Ä—Å–æ–≤ –∏–∑ –±–∞–∑—ã`);
      return rows;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:", err);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø–æ ID
  async getCourseById(id: number): Promise<Course | null> {
    try {
      const query = `SELECT * FROM courses WHERE id = ? AND active = 1`;
      const course = this.db.prepare(query).get(id) as Course | undefined;
      return course || null;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:", err);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
  async getCourseByName(name: string): Promise<Course | null> {
    try {
      const query = `SELECT * FROM courses WHERE name LIKE ? AND active = 1 LIMIT 1`;
      const course = this.db.prepare(query).get(`%${name}%`) as
        | Course
        | undefined;
      return course || null;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –ø–æ –∏–º–µ–Ω–∏:", err);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –ø–æ —Ñ–æ—Ä–º–∞—Ç—É (–æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω)
  async getCoursesByFormat(format: string): Promise<Course[]> {
    try {
      const query = `
        SELECT * FROM courses
        WHERE format = ? AND active = 1
        ORDER BY price ASC
      `;
      const rows = this.db.prepare(query).all(format) as Course[];
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º '${format}': ${rows.length}`);
      return rows;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:", err);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  async getCoursesByPriceRange(
    minPrice: number,
    maxPrice: number,
  ): Promise<Course[]> {
    try {
      const query = `
        SELECT * FROM courses
        WHERE price >= ? AND price <= ? AND active = 1
        ORDER BY price ASC
      `;
      const rows = this.db.prepare(query).all(minPrice, maxPrice) as Course[];
      console.log(
        `‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${minPrice}-${maxPrice}: ${rows.length}`,
      );
      return rows;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –ø–æ —Ü–µ–Ω–µ:", err);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  async searchCourses(keywords: string) {
    logger.info(`–ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: "${keywords}"`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = createCacheKey("search", keywords);
    const cached = coursesCache.get(cacheKey);
    if (cached) {
      logger.debug("Courses found in cache");
      return cached;
    }

    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const patterns = [
      `%${keywords}%`,
      `%${keywords.toLowerCase()}%`,
      `%${keywords.charAt(0).toUpperCase() + keywords.slice(1).toLowerCase()}%`,
      `%${keywords.toUpperCase()}%`,
    ];

    const query = `
      SELECT DISTINCT * FROM courses
      WHERE (
        name LIKE ? OR name LIKE ? OR name LIKE ? OR name LIKE ? OR
        description LIKE ? OR description LIKE ? OR description LIKE ? OR description LIKE ? OR
        targetAudience LIKE ? OR targetAudience LIKE ? OR targetAudience LIKE ? OR targetAudience LIKE ? OR
        benefits LIKE ? OR benefits LIKE ? OR benefits LIKE ? OR benefits LIKE ?
      ) AND active = 1
      ORDER BY price ASC
    `;

    try {
      const stmt = this.db.prepare(query);
      const rows = stmt.all(
        ...patterns,
        ...patterns,
        ...patterns,
        ...patterns,
      ) as Course[];
      if (rows.length > 0) {
        logger.info(
          `–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã: ${rows.map((r: any) => r.name).join(", ")}`,
        );
        coursesCache.set(cacheKey, rows);
      }
      return rows;
    } catch (err) {
      logger.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤:", err);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async getCategories(): Promise<string[]> {
    try {
      const cacheKey = "categories";
      const cached = coursesCache.get(cacheKey);
      if (cached) {
        return cached;
      }

      const query = `SELECT DISTINCT category FROM courses WHERE active = 1 AND category IS NOT NULL`;
      const rows = this.db.prepare(query).all() as { category: string }[];
      const categories = rows.map((r) => r.category).filter(Boolean);

      coursesCache.set(cacheKey, categories);
      logger.info(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
      return categories;
    } catch (err) {
      logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", err);
      return [];
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatCourseInfo(course: Course): string {
    let info = `\nüìö ${course.name}\n`;

    // –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–°–ï
    info += `\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–£–†–°–ï:\n`;

    // –§–û–†–ú–ê–¢ –û–ë–£–ß–ï–ù–ò–Ø
    if (course.format) {
      if (course.format.toLowerCase() === "–æ–Ω–ª–∞–π–Ω") {
        info += `üì± –§–æ—Ä–º–∞—Ç: –û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ\n`;
      } else if (course.format.toLowerCase() === "–æ—Ñ–ª–∞–π–Ω") {
        info += `üè¢ –§–æ—Ä–º–∞—Ç: –û—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –∞–∫–∞–¥–µ–º–∏–∏\n`;
      }
    }

    // –¶–ï–ù–ê - –¢–û–ß–ù–ê–Ø –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
    info += `üí∞ –°–¢–û–ò–ú–û–°–¢–¨: ${course.price.toLocaleString("ru-RU")} ‚ÇΩ\n`;
    info += `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${course.duration}\n`;
    info += `üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${course.enrollmentUrl}\n`;
    info += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

    // –û–ü–ò–°–ê–ù–ò–ï –ö–£–†–°–ê
    info += `\nüìù –û–ü–ò–°–ê–ù–ò–ï:\n`;
    info += `${course.description}\n`;

    // –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê
    info += `\nüéØ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n`;
    info += `${course.benefits}\n`;

    // –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø
    info += `\nüë• –î–õ–Ø –ö–û–ì–û:\n`;
    info += `${course.targetAudience}\n`;

    // –ü–†–û–ì–†–ê–ú–ú–ê –ö–£–†–°–ê
    info += `\nüìñ –ü–†–û–ì–†–ê–ú–ú–ê:\n`;
    info += `${course.curriculum}\n`;

    // –î–ê–¢–ê –ù–ê–ß–ê–õ–ê
    info += `${formatCourseDate(course.name)}\n`;

    // –ö–ê–ö –ó–ê–ü–ò–°–ê–¢–¨–°–Ø
    info += `\nüìù –ö–ê–ö –ó–ê–ü–ò–°–ê–¢–¨–°–Ø:\n`;
    info += `‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n`;
    info += `‚Ä¢ –ù–∞ —Å–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É\n`;
    info += `‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ, —è –ø–æ–º–æ–≥—É!`;

    return info;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
  formatCourseShortInfo(course: Course): string {
    const format = course.format ? ` (${course.format})` : "";
    return (
      `üìö ${course.name}${format}\n` +
      `üí∞ ${course.price.toLocaleString("ru-RU")} ‚ÇΩ\n` +
      `‚è± ${course.duration}\n` +
      `üîó ${course.enrollmentUrl}`
    );
  }

  // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  close(): void {
    try {
      this.db.close();
      console.log("üëã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∑–∞–∫—Ä—ã—Ç–∞");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –∫—É—Ä—Å–æ–≤:", err);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const coursesDB = new CoursesDatabase();
